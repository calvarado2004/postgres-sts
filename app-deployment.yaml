---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: app-golang
spec:
  replicas: 2
  selector:
    matchLabels:
      id: app-golang
  template:
    metadata:
      labels:
        id: app-golang
    spec:
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
                - key: "id"
                  operator: In
                  values:
                  - app-golang
            topologyKey: "kubernetes.io/hostname"
            #topologyKey: topology.kubernetes.io/zone
      securityContext:
        Type: anyuid
        #fsGroup: 1001
      initContainers:
      - image: bitnami/postgresql:13.6.0
        securityContext:
          Type: anyuid
          #fsGroup: 1001
        name: postgresql
        env:
        - name: DB_SERVER
          value: "pgpool-svc"
        - name: ALLOW_EMPTY_PASSWORD
          value: "yes"
        - name: DB_PORT
          value: "5432"
        - name: DB_USER
          value: "postgres"
        - name: DB_DATABASE
          value: "todos"
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-secrets
              key: postgresql-password
        command: ["/bin/sh"]
        args: ["-c", "PGPASSWORD=$(DB_PASSWORD) psql -h $(DB_SERVER) -p $(DB_PORT) -U $(DB_USER) -c 'CREATE DATABASE $(DB_DATABASE)' || true && PGPASSWORD=$(DB_PASSWORD) psql -h $(DB_SERVER) -p $(DB_PORT) -U $(DB_USER) -d $(DB_DATABASE) -c 'CREATE TABLE todos (item text);'  || true "]
      containers:
      - name: app-golang
        image: calvarado2004/golang-app:0.1
        volumeMounts:
        - mountPath: /.cache
          name: cache-volume
        - mountPath: /go/pkg/mod/cache/download/github.com
          name: download-volume
        securityContext:
          Type: anyuid
          fsGroup: 1000
          #fsGroup: 1001
        env:
        - name: DB_SERVER
          value: "pgpool-svc"
        - name: DB_PORT
          value: "5432"
        - name: DB_USER
          value: "postgres"
        - name: DB_DATABASE
          value: "todos"
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-secrets
              key: postgresql-password
        resources:
          requests:
            cpu: 400m
            memory: 1Gi
          limits:
            cpu: 800m
            memory: 2Gi
        livenessProbe:
          exec:
            command:
              - bash
              - -ec
              - 'curl http://127.0.0.1:8080'
          initialDelaySeconds: 60
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 12
        readinessProbe:
          exec:
            command:
              - bash
              - -ec
              - 'curl http://127.0.0.1:8080'
          initialDelaySeconds: 45
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 6
        ports:
          - name: http
            containerPort: 8080
            protocol: TCP
      volumes:
      - name: cache-volume
        emptyDir: {}
      - name: download-volume
        emptyDir: {}
---
apiVersion: v1
kind: Service
metadata:
  name: app-golang-svc
spec:
  type: NodePort
  sessionAffinity: None
  ports:
    - name: http
      port: 8080
      targetPort: http
      protocol: TCP
  selector:
    id: app-golang